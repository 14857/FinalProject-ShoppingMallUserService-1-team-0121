Index: app/src/main/java/com/example/frume/service/UserService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frume.service\r\n\r\n\r\nimport android.content.Context\r\nimport androidx.core.content.edit\r\nimport com.example.frume.model.UserModel\r\nimport com.example.frume.repository.UserRepository\r\nimport com.example.frume.util.CustomerUserState\r\nimport com.example.frume.util.LoginResult\r\nimport com.example.frume.vo.UserVO\r\nimport android.util.Log\r\nimport com.example.frume.model.ProductModel\r\nimport com.example.frume.model.UserModel\r\nimport com.example.frume.repository.ProductRepository\r\n\r\n\r\nclass UserService {\r\n    companion object{\r\n        // 사용자 정보를 추가하는 메서드\r\n        fun addCustomerUserData(userModel: UserModel){\r\n            // 데이터를 VO에 담아준다.\r\n            val userVO = userModel.toUserVO()\r\n            // 저장하는 메서드를 호출한다.\r\n            UserRepository.addCustomerUserData(userVO)\r\n        }\r\n\r\n        // 가입하려는 아이디가 존재하는지 확인하는 메서드\r\n        suspend fun checkJoinCustomerUserId(customerUserId:String) : Boolean{\r\n            // 아이디를 통해 사용자 정보를 가져온다.\r\n            val userVoList = UserRepository.selectUserDataByCustomerUserId(customerUserId)\r\n            // 가져온 데이터가 있다면\r\n            return userVoList.isEmpty()\r\n        }\r\n        \r\n            // 로그인 처리 메서드\r\n        suspend fun checkLogin(loginUserId:String, loginUserPw:String) : LoginResult {\r\n            // 로그인 결과\r\n            var result = LoginResult.LOGIN_RESULT_SUCCESS\r\n\r\n            // 입력한 아이디로 사용자 정보를 가져온다.\r\n            val userVoList = UserRepository.selectUserDataByUserId(loginUserId)\r\n\r\n            // 가져온 사용자 정보가 없다면\r\n            if(userVoList.isEmpty()){\r\n                result = LoginResult.LOGIN_RESULT_ID_NOT_EXIST\r\n            } else {\r\n                if(loginUserPw != userVoList[0].customerUserPw){\r\n                    // 비밀번호가 다르다면\r\n                    result = LoginResult.LOGIN_RESULT_PASSWORD_INCORRECT\r\n                }\r\n                // 탈퇴한 회원이라면\r\n                if(userVoList[0].customerUserState == CustomerUserState.CUSTOMER_USER_STATE_WITHDRAWN.num){\r\n                    result = LoginResult.LOGIN_RESULT_SIGN_OUT_MEMBER\r\n                }\r\n            }\r\n            return result\r\n        }\r\n\r\n        // 사용자 아이디를 통해 문서 id와 사용자 정보를 가져온다.\r\n        // 사용자 아이디와 동일한 사용자의 정보 하나를 반환하는 메서드\r\n        suspend fun selectUserDataByUserIdOne(userId:String) : UserModel {\r\n            val tempVO = UserRepository.selectUserDataByUserIdOne(userId)[0]\r\n            val loginUserModel = tempVO.toUserModel()\r\n            return loginUserModel\r\n        }\r\n\r\n\r\n        // 로그인 처리 메서드\r\n        suspend fun checkLogin(loginUserId:String, loginUserPw:String) : LoginResult {\r\n            // 로그인 결과\r\n            var result = LoginResult.LOGIN_RESULT_SUCCESS\r\n\r\n            // 입력한 아이디로 사용자 정보를 가져온다.\r\n            val userVoList = UserRepository.selectUserDataByUserId(loginUserId)\r\n\r\n            // 가져온 사용자 정보가 없다면\r\n            if(userVoList.isEmpty()){\r\n                result = LoginResult.LOGIN_RESULT_ID_NOT_EXIST\r\n            } else {\r\n                if(loginUserPw != userVoList[0].customerUserPw){\r\n                    // 비밀번호가 다르다면\r\n                    result = LoginResult.LOGIN_RESULT_PASSWORD_INCORRECT\r\n                }\r\n                // 탈퇴한 회원이라면\r\n                if(userVoList[0].customerUserState == CustomerUserState.CUSTOMER_USER_STATE_WITHDRAWN.num){\r\n                    result = LoginResult.LOGIN_RESULT_SIGNOUT_MEMBER\r\n                }\r\n            }\r\n            return result\r\n        }\r\n\r\n        // 사용자 아이디를 통해 문서 id와 사용자 정보를 가져온다.\r\n        // 사용자 아이디와 동일한 사용자의 정보 하나를 반환하는 메서드\r\n        suspend fun selectUserDataByUserIdOne(userId:String) : UserModel {\r\n            val tempVO = UserRepository.selectUserDataByUserIdOne(userId)[0]\r\n            val loginUserModel = tempVO.toUserModel()\r\n            return loginUserModel\r\n        }\r\n\r\n\r\n        // hyeonseo 0123\r\n        // 자동로그인 토큰값을 갱신하는 메서드\r\n        suspend fun updateUserAutoLoginToken(context: Context, customerUserDocId:String){\r\n            // 새로운 토큰값을 발행한다.\r\n            val newToken = \"${customerUserDocId}${System.nanoTime()}\"\r\n            // SharedPreference에 저장한다.\r\n            val pref = context.getSharedPreferences(\"LoginToken\", Context.MODE_PRIVATE)\r\n            pref.edit {\r\n                putString(\"token\", newToken)\r\n            }\r\n            // 서버에 저장한다.\r\n            UserRepository.updateUserAutoLoginToken(customerUserDocId, newToken)\r\n        }\r\n\r\n        // hyeonseo 0123\r\n        // 자동 로그인 토큰 값으로 사용자 정보를 가져오는 메서드\r\n        suspend fun selectUserDataByLoginToken(loginToken:String) : UserModel?{\r\n            val loginUserVO = UserRepository.selectUserDataByLoginToken(loginToken)\r\n            if(loginUserVO == null){\r\n                return null\r\n            } else {\r\n\r\n                // 2차 주석 처리 -> VO에 문서ID 이미 있어서 필요 없을듯.\r\n                //val customerUserDocId = loginUserVO.customerUserDocId\r\n\r\n                val userModel = loginUserVO.toUserModel()\r\n                return userModel\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/frume/service/UserService.kt b/app/src/main/java/com/example/frume/service/UserService.kt
--- a/app/src/main/java/com/example/frume/service/UserService.kt	(revision bb4d001bd7c6d0f7ecde2b594d63b98d858396c0)
+++ b/app/src/main/java/com/example/frume/service/UserService.kt	(date 1737683505313)
@@ -10,7 +10,6 @@
 import com.example.frume.vo.UserVO
 import android.util.Log
 import com.example.frume.model.ProductModel
-import com.example.frume.model.UserModel
 import com.example.frume.repository.ProductRepository
 
 
@@ -31,31 +30,8 @@
             // 가져온 데이터가 있다면
             return userVoList.isEmpty()
         }
-        
-            // 로그인 처리 메서드
-        suspend fun checkLogin(loginUserId:String, loginUserPw:String) : LoginResult {
-            // 로그인 결과
-            var result = LoginResult.LOGIN_RESULT_SUCCESS
 
-            // 입력한 아이디로 사용자 정보를 가져온다.
-            val userVoList = UserRepository.selectUserDataByUserId(loginUserId)
 
-            // 가져온 사용자 정보가 없다면
-            if(userVoList.isEmpty()){
-                result = LoginResult.LOGIN_RESULT_ID_NOT_EXIST
-            } else {
-                if(loginUserPw != userVoList[0].customerUserPw){
-                    // 비밀번호가 다르다면
-                    result = LoginResult.LOGIN_RESULT_PASSWORD_INCORRECT
-                }
-                // 탈퇴한 회원이라면
-                if(userVoList[0].customerUserState == CustomerUserState.CUSTOMER_USER_STATE_WITHDRAWN.num){
-                    result = LoginResult.LOGIN_RESULT_SIGN_OUT_MEMBER
-                }
-            }
-            return result
-        }
-
         // 사용자 아이디를 통해 문서 id와 사용자 정보를 가져온다.
         // 사용자 아이디와 동일한 사용자의 정보 하나를 반환하는 메서드
         suspend fun selectUserDataByUserIdOne(userId:String) : UserModel {
@@ -83,20 +59,13 @@
                 }
                 // 탈퇴한 회원이라면
                 if(userVoList[0].customerUserState == CustomerUserState.CUSTOMER_USER_STATE_WITHDRAWN.num){
-                    result = LoginResult.LOGIN_RESULT_SIGNOUT_MEMBER
+                    result = LoginResult.LOGIN_RESULT_SIGN_OUT_MEMBER
                 }
             }
             return result
         }
 
         // 사용자 아이디를 통해 문서 id와 사용자 정보를 가져온다.
-        // 사용자 아이디와 동일한 사용자의 정보 하나를 반환하는 메서드
-        suspend fun selectUserDataByUserIdOne(userId:String) : UserModel {
-            val tempVO = UserRepository.selectUserDataByUserIdOne(userId)[0]
-            val loginUserModel = tempVO.toUserModel()
-            return loginUserModel
-        }
-
 
         // hyeonseo 0123
         // 자동로그인 토큰값을 갱신하는 메서드
Index: app/src/main/java/com/example/frume/repository/UserRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frume.repository\r\nimport android.util.Log\r\nimport com.example.frume.vo.ProductVO\r\nimport com.example.frume.vo.UserVO\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport kotlinx.coroutines.tasks.await\r\n\r\nimport android.util.Log\r\nimport com.example.frume.vo.ProductVO\r\nimport com.example.frume.vo.UserVO\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport kotlinx.coroutines.tasks.await\r\n\r\nclass UserRepository {\r\n    companion object{\r\n        // 사용자 정보를 추가하는 메서드\r\n        fun addCustomerUserData(userVO: UserVO){\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"userData\")\r\n            val documentReference = collectionReference.document()\r\n            val addUserVO = userVO\r\n            addUserVO.customerUserDocId = documentReference.id\r\n            documentReference.set(addUserVO)\r\n        }\r\n\r\n        // 사용자 아이디를 통해 사용자 데이터를 가져오는 메서드\r\n\r\n        suspend fun selectUserDataByCustomerUserId(customerUserId:String) : MutableList<UserVO>{\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"userData\")\r\n            val result = collectionReference.whereEqualTo(\"customerUserId\", customerUserId).get().await()\r\n\r\n            // Log.d(\"test100\", \"${result.documents}\")\r\n            val userVoList = result.toObjects(UserVO::class.java)\r\n            return userVoList\r\n        }\r\n\r\n\r\n  \r\n        // 자동로그인 토큰값을 갱신하는 메서드\r\n        suspend fun updateUserAutoLoginToken(customerUserDocId:String, customerUserLocalToken:String){\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"userData\")\r\n            val documentReference = collectionReference.document(customerUserDocId)\r\n            val tokenMap = mapOf(\r\n                \"userAutoLoginToken\" to customerUserLocalToken\r\n            )\r\n            documentReference.update(tokenMap).await()\r\n        }\r\n\r\n\r\n        // 자동 로그인 토큰 값으로 사용자 정보를 가져오는 메서드\r\n        suspend fun selectUserDataByLoginToken(customerUserLocalToken:String) : UserVO?{\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"userData\")\r\n            val resultList = collectionReference.whereEqualTo(\"customerUserLocalToken\", customerUserLocalToken).get().await()\r\n            val userVOList = resultList.toObjects(UserVO::class.java)\r\n\r\n            if(userVOList.isEmpty()){\r\n                return null\r\n            } else {\r\n\r\n                val returnUserVO = userVOList[0]\r\n                // 이거 잘 확인되면 return userVOList으로 바로 가도될듯..\r\n\r\n                Log.d(\"test100\", \"UserRepository.selectUserDataByLoginToken() -> userVOList ${userVOList}\")\r\n\r\n                return returnUserVO\r\n            }\r\n        }\r\n\r\n       \r\n        // 사용자 아이디를 통해 사용자 데이터를 가져오는 메서드\r\n        suspend fun selectUserDataByUserId(customerUserId:String) : MutableList<UserVO>{\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"userData\")\r\n            val result = collectionReference.whereEqualTo(\"customerUserId\", customerUserId).get().await()\r\n            val userVoList = result.toObjects(UserVO::class.java)\r\n            return userVoList\r\n        }\r\n\r\n        // 사용자 아이디와 동일한 사용자의 정보 하나를 반환하는 메서드\r\n        suspend fun selectUserDataByUserIdOne(userId:String) : MutableList<UserVO>{\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"userData\")\r\n            val result = collectionReference.whereEqualTo(\"customerUserId\", userId).get().await()\r\n            val userVoList = result.toObjects(UserVO::class.java)\r\n\r\n            return userVoList\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/frume/repository/UserRepository.kt b/app/src/main/java/com/example/frume/repository/UserRepository.kt
--- a/app/src/main/java/com/example/frume/repository/UserRepository.kt	(revision bb4d001bd7c6d0f7ecde2b594d63b98d858396c0)
+++ b/app/src/main/java/com/example/frume/repository/UserRepository.kt	(date 1737683495579)
@@ -1,12 +1,6 @@
 package com.example.frume.repository
+
 import android.util.Log
-import com.example.frume.vo.ProductVO
-import com.example.frume.vo.UserVO
-import com.google.firebase.firestore.FirebaseFirestore
-import kotlinx.coroutines.tasks.await
-
-import android.util.Log
-import com.example.frume.vo.ProductVO
 import com.example.frume.vo.UserVO
 import com.google.firebase.firestore.FirebaseFirestore
 import kotlinx.coroutines.tasks.await
Index: app/src/main/java/com/example/frume/util/Values.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frume.util\r\n\r\nenum class UserInfoType(var number: Int, var str: String) {\r\n    // 주문 내역 및 배송조회\r\n    USER_ORDER_HISTORY_FRAGMENT(0, \"주문 내역 및 배송조회\"),\r\n\r\n    // 주문 상세 내역\r\n    USER_ORDER_DETAIL_FRAGMENT(1, \"주문 상세 내역\"),\r\n\r\n    // 주문 반품 및 취소\r\n    USER_CANCEL_AND_RETURN_FRAGMENT(2, \"주문 반품 및 취소\"),\r\n\r\n    // 회원 정보 관리 및 탈퇴\r\n    USER_INFO_MANAGE_FRAGMENT(3, \"회원 정보 관리 및 탈퇴\"),\r\n\r\n    // 회원 정보 수정\r\n    USER_INFO_MODIFY_FRAGMENT(4, \"회원 정보 수정\"),\r\n\r\n    // 배송지 관리\r\n    USER_ADDRESS_MANAGE_FRAGMENT(5, \"배송지 관리\")\r\n}\r\n    \r\n    // 홈 화면 탭 레이아웃 분류\r\nenum class CategoryType(val number: Int, val category: String) {\r\n    CATEGORY_HOME_MAIN(0, \"홈\"),\r\n    CATEGORY_HOME_NEW(1, \"신제품\"),\r\n    CATEGORY_HOME_SALE(2, \"특가\"),\r\n    CATEGORY_HOME_BEST(3, \"베스트\"),\r\n    CATEGORY_HOME_SINGLE(4, \"1인가구\"),\r\n    CATEGORY_HOME_PACKAGE(5, \"패키지\")\r\n    }\r\n\r\nenum class UserPaymentType(var number: Int, var str: String){\r\n    // 장바구니\r\n    USER_CART_FRAGMENT(1, \"UserCartFragment\"),\r\n    // 장바구니 2 (1회 구매)\r\n    USER_CART_FRAGMENT1(2, \"UserCartFragment1\"),\r\n    // 결제\r\n    USER_PAYMENT_SCREEN_FRAGMENT(3,\"UserPaymentScreenFragment\")\r\n}\r\n\r\nenum class ProductInfoType(var number: Int, var str: String){\r\n    // 상품 (tabLayout을 갖고있는 화면)\r\n    USER_PRODUCT_INFO_TYPE(0,\"UserProductInfoFragment\"),\r\n    // 상품 설명\r\n    USER_PRODUCT_INFO_DESCRIPTION_TYPE(1, \"UserProductInfoDescription\"),\r\n    // 상품 상세 정보\r\n    USER_PRODUCT_INFO_DETAIL_TYPE(2,\"UserProductInfoDetailFragment\"),\r\n    // 상품 후기\r\n    USER_PRODUCT_INFO_REVIEW_TYPE(3,\"UserProductInfoReviewFragment\"),\r\n    // 상품 후기 작성\r\n    USER_PRODUCT_INFO_WRITE_TYPE(4,\"UserProductWriteReviewFragment\"),\r\n    // 상품 주문 다이얼로그\r\n    USER_PRODUCT_INFO_DIALOG_TYPE(5,\"UserProductInfoDialogFragment\"),\r\n    // 상품 리스트 뷰\r\n    USER_PRODUCT_SHOW_LIST_TYPE(6,\"userProductShowListFragment\")\r\n    // 구매 뷰\r\n}\r\n    \r\n\r\nenum class ProductCategoryDetailType(var number: Int, var str: String) {\r\n    PRODUCT_CATEGORY_STRAWBERRY(0,\"딸기\"),\r\n    PRODUCT_CATEGORY_APPLE(1,\"사과\"),\r\n    PRODUCT_CATEGORY_TANGERINE(2,\"감귤\"),\r\n    PRODUCT_CATEGORY_GRAPE(3,\"포도\"),\r\n    PRODUCT_CATEGORY_MANGO(4,\"망고\"),\r\n    PRODUCT_CATEGORY_BLUEBERRY(5,\"블루베리\"),\r\n    PRODUCT_CATEGORY_KIWI(6,\"키위\"),\r\n    PRODUCT_CATEGORY_ORANGE(7,\"오렌지\"),\r\n    PRODUCT_CATEGORY_SINGLE(8,\"1인 가구\"),\r\n    PRODUCT_CATEGORY_BULK(9,\"대용량\"),\r\n    PRODUCT_CATEGORY_PACKAGE(10,\"패키지\"),\r\n    PRODUCT_CATEGORY_SALE(11,\"특가\"),\r\n    PRODUCT_CATEGORY_SEARCH(12,\"검색\"),\r\n    PRODUCT_CATEGORY_DOMESTIC(13,\"국산\"),\r\n    PRODUCT_CATEGORY_IMPORTED(14,\"수입\")\r\n\r\n}\r\n\r\n// 관리자 상태\r\nenum class AdminSate(val number:Int, val str:String){\r\n    // 정상\r\n    ADMIN_STATE_NORMAL(1, \"정상\"),\r\n    // 탈퇴\r\n    ADMIN_STATE_SIGN_OUT(2, \"탈퇴\")\r\n}\r\n\r\nenum class AdminSalesState(val num: Int, val str: String) {\r\n    ADMIN_SALES_STATE_NORMAL(1,\"정상\"),\r\n    ADMIN_SALES_STATE_ABNORMAL(2,\"비정상\"),\r\n\r\n}\r\n\r\nenum class CartState(val num: Int, val str: String) {\r\n    CART_STATE_NORMAL(1,\"정상\"),\r\n    CART_STATE_ABNORMAL(2,\"비정상\"),\r\n\r\n}\r\n\r\nenum class DeliveryCycleWeeks(val num: Int, val str: String) {\r\n   DELIVERY_CYCLE_WEEKS_ONE(1,\"1 주\"),\r\n    DELIVERY_CYCLE_WEEKS_TWO(2,\"2 주\"),\r\n    DELIVERY_CYCLE_WEEKS_THREE(3,\"3 주\"),\r\n    DELIVERY_CYCLE_WEEKS_FOUR(4,\"4 주\"),\r\n}\r\n\r\nenum class DeliveryCycleDays(val num: Int, val str: String) {\r\n    DELIVERY_CYCLE_DAYS_MONDAY(1,\"월요일\"),\r\n    DELIVERY_CYCLE_DAYS_TUESDAY(2,\"화요일\"),\r\n    DELIVERY_CYCLE_DAYS_WEDNESDAY(3,\"수요일\"),\r\n    DELIVERY_CYCLE_DAYS_THURSDAY(4,\"목요일\"),\r\n    DELIVERY_CYCLE_DAYS_FRIDAY(5,\"금요일\"),\r\n    DELIVERY_CYCLE_DAYS_SATURDAY(6,\"토요일\"),\r\n    DELIVERY_CYCLE_DAYS_SUNDAY(7,\"일요일\"),\r\n}\r\n\r\nenum class CartProductState(val num: Int, val str: String) {\r\n    CART_PRODUCT_STATE_NORMAL(1,\"정상\"),\r\n    CART_PRODUCT_STATE_ABNORMAL(2,\"비정상\"),\r\n}\r\n\r\nenum class CartProductIsPurchasesBoolType(val bool: Boolean, val str: String) {\r\n    CART_PRODUCT_IS_PURCHASES_TRUE(true,\"구매할 품목\"),\r\n    CART_PRODUCT_IS_PURCHASES_FALSE(false,\"구매하지 않을 품목\"),\r\n}\r\n\r\nenum class CartProductSubscribeState(val num: Int, val str: String) {\r\n    CART_PRODUCT_STATE_NOT_SUBSCRIBE(0,\"비구독\"),\r\n    CART_PRODUCT_STATE_SUBSCRIBE(1,\"구독\"),\r\n}\r\n\r\nenum class DeliveryDefaultAddressBoolType(val bool: Boolean, val str: String) {\r\n    DELIVERY_ADDRESS_TYPE_IS_DEFAULT(true,\"기본 배송지\"),\r\n    DELIVERY_ADDRESS_TYPE_IS_NOT_DEFAULT(false,\"일반 배송지\"),\r\n}\r\n\r\nenum class DeliveryAddressState(val num: Int, val str: String) {\r\n    DELIVERY_ADDRESS_STATE_NORMAL(1,\"정상\"),\r\n    DELIVERY_ADDRESS_STATE_ABNORMAL(2,\"비정상\"),\r\n}\r\n\r\nenum class DeliverySubscribeState(val num: Int, val str: String) {\r\n    DELIVERY_STATE_NOT_SUBSCRIBE(0,\"비구독\"),\r\n    DELIVERY_STATE_SUBSCRIBE(1,\"구독\"),\r\n}\r\n\r\nenum class DeliveryState(val num: Int, val str: String) {\r\n    DELIVERY_STATE_READY_FOR_SHIPMENT(1, \"출고준비\"),\r\n    DELIVERY_STATE_SHIPMENT_COMPLETE(2, \"출고완료\"),\r\n    DELIVERY_STATE_READY_FOR_DELIVERY(3, \"배송준비\"),\r\n    DELIVERY_STATE_IN_DELIVERY(4, \"배송중\"),\r\n    DELIVERY_STATE_DELIVERED(5, \"배송완료\")\r\n}\r\n\r\nenum class InquiryIsSecretBoolType(val bool: Boolean, val str: String) {\r\n    INQUIRY_IS_SECRET_TRUE(true,\"비공개\"),\r\n    INQUIRY_IS_SECRET_FALSE(false,\"공개\"),\r\n}\r\n\r\nenum class InquiryIsOpenBoolType(val bool: Boolean, val str: String) {\r\n    INQUIRY_IS_OPEN_TRUE(true,\"공개 문의\"),\r\n    INQUIRY_IS_OPEN_FALSE(false,\"비공개 문의\"),\r\n}\r\n\r\nenum class OrderPaymentOption(val num: Int, val str: String){\r\n    ORDER_PAYMENT_OPTION_ACCOUNT(1,\"계좌이체\"),\r\n    ORDER_PAYMENT_OPTION_CARD(2,\"카드결제\"),\r\n    ORDER_PAYMENT_OPTION_KAKAO_PAY(3,\"카카오페이\"),\r\n    ORDER_PAYMENT_OPTION_NAVER_PAY(4,\"네이버페이\")\r\n}\r\n\r\nenum class OrderDeliveryOption(val num: Int, val str: String) {\r\n    DOOR_DELIVERY(1, \"문앞배송\"),\r\n    PARCEL_LOCKER(2, \"택배함\"),\r\n    SECURITY_OFFICE(3, \"경비실\")\r\n}\r\n\r\nenum class OrderIsOneTimeDeliveryBoolType(val bool: Boolean, val str: String) {\r\n    ONE_TIME_DELIVERY(true, \"일회성배송\"),\r\n    REGULAR_DELIVERY(false, \"정기배송\")\r\n}\r\n\r\nenum class OrderState(val num: Int, val str: String) {\r\n    ORDER_STATE_PAYMENT_PENDING(1, \"결제대기중\"),\r\n    ORDER_STATE_PAYMENT_COMPLETED(2, \"결제 완료\"),\r\n    ORDER_STATE_CANCELLED(3, \"주문 취소\"),\r\n    ORDER_STATE_RETURNED(4, \"반품\"),\r\n    ORDER_STATE_EXCHANGED(5, \"교환\")\r\n}\r\n\r\nenum class OrderProductState(val num: Int, val str: String) {\r\n    ORDER_PRODUCT_STATE_NORMAL(1, \"정상\"),\r\n    ORDER_PRODUCT_STATE_ABNORMAL(2, \"비정상\"),\r\n}\r\n\r\nenum class ProductType(val num: Int, val str: String) {\r\n    PRODUCT_TYPE_FRESH(1, \"신선 과일\"),      // 신선 상태의 상품 ex) 생과일, 유기농\r\n    PRODUCT_TYPE_PROCESSED(2, \"가공 과일\"),  // 가공된 상품 ex) 건조, 냉동,\r\n    PRODUCT_TYPE_MIXED(3, \"혼합 과일\"),      // 혼합 상품 ex) 과일세트, 바구니\r\n    PRODUCT_TYPE_OTHER(4, \"기타\")       // 기타 상품\r\n}\r\n\r\nenum class ProductSellingState(val num: Int, val str: String){\r\n    PRODUCT_STATE_NORMAL(1, \"정상\"),\r\n    PRODUCT_STATE_ABNORMAL(2, \"비정상\"),\r\n}\r\n\r\nenum class ReviewState(val num: Int, val str: String) {\r\n    REVIEW_STATE_VISIBLE(1, \"노출상태\"),  // 리뷰가 노출되는 상태\r\n    REVIEW_STATE_HIDDEN(2, \"숨김상태\")    // 리뷰가 숨겨진 상태\r\n}\r\n\r\nenum class SubscribeState(val num: Int, val str: String) {\r\n    SUBSCRIBE_STATE_NOT_SUBSCRIBE(0,\"비구독\"),\r\n    SUBSCRIBE_STATE_SUBSCRIBE(1,\"구독\"),\r\n}\r\n\r\nenum class CustomerUserGender(val num: Int, val str: String){\r\n    CUSTOMER_USER_GENDER_MALE(1,\"남자\"),\r\n    CUSTOMER_USER_GENDER_FEMALE(2,\"여자\")\r\n}\r\n\r\nenum class CustomerUserState(val num: Int, val str: String) {\r\n    CUSTOMER_USER_STATE_ACTIVE(1, \"활동\"),    // 활동 중인 사용자\r\n    CUSTOMER_USER_STATE_WITHDRAWN(2, \"탈퇴\"), // 탈퇴한 사용자\r\n    CUSTOMER_USER_STATE_SUSPENDED(3, \"정지\")  // 정지된 사용자\r\n}\r\n\r\n\r\n// hyeonseo 0123\r\n// 로그인 결과\r\nenum class LoginResult(val number:Int, val str:String){\r\n    LOGIN_RESULT_SUCCESS(1, \"로그인 성공\"),\r\n    LOGIN_RESULT_ID_NOT_EXIST(2, \"존재하지 않는 아이디\"),\r\n    LOGIN_RESULT_PASSWORD_INCORRECT(3, \"잘못된 비밀번호\"),\r\n    LOGIN_RESULT_SIGNOUT_MEMBER(4, \"탈퇴한 회원\"),\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/frume/util/Values.kt b/app/src/main/java/com/example/frume/util/Values.kt
--- a/app/src/main/java/com/example/frume/util/Values.kt	(revision bb4d001bd7c6d0f7ecde2b594d63b98d858396c0)
+++ b/app/src/main/java/com/example/frume/util/Values.kt	(date 1737683484202)
@@ -233,6 +233,6 @@
     LOGIN_RESULT_SUCCESS(1, "로그인 성공"),
     LOGIN_RESULT_ID_NOT_EXIST(2, "존재하지 않는 아이디"),
     LOGIN_RESULT_PASSWORD_INCORRECT(3, "잘못된 비밀번호"),
-    LOGIN_RESULT_SIGNOUT_MEMBER(4, "탈퇴한 회원"),
+    LOGIN_RESULT_SIGN_OUT_MEMBER(4, "탈퇴한 회원"),
 }
 
Index: app/src/main/java/com/example/frume/fragment/user_fragment/product_info/UserProductInfoFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frume.fragment.user_fragment.product_info\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport com.example.frume.R\r\nimport com.example.frume.data.Storage\r\nimport com.example.frume.data.TempProduct\r\nimport com.example.frume.databinding.FragmentUserProductInfoBinding\r\nimport com.google.android.material.tabs.TabLayoutMediator\r\n\r\n\r\nclass UserProductInfoFragment : Fragment() {\r\n    private var _binding: FragmentUserProductInfoBinding? = null\r\n    private val binding get() = _binding!!\r\n    private val args: UserProductInfoFragmentArgs by navArgs()\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding =\r\n            DataBindingUtil.inflate(inflater, R.layout.fragment_user_product_info, container, false)\r\n\r\n        onClickNavigationIconBackStack()\r\n        return binding.root\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding!!\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setLayout()\r\n    }\r\n\r\n\r\n    private fun setLayout() {\r\n        val detailList = Storage.detailList\r\n        binding.viewPagerUserProductInfo.adapter = ProductTabAdapter(this, detailList, args.productDocId!!)\r\n        TabLayoutMediator(binding.tabLayoutUserProductInfo, binding.viewPagerUserProductInfo) { tab, pos ->\r\n            tab.text = detailList[pos]\r\n        }.attach()\r\n        toolbarSetting()\r\n\r\n    }\r\n\r\n\r\n    private fun toolbarSetting() {\r\n        binding.toolBarUserProductInfo.title = args.selectedProductDocId\r\n        UserProductInfoFragmentDirections.actionUserProductInfoToUserProductInfoDescriptionFragment(args.selectedProductDocId)\r\n\r\n    }\r\n\r\n    // sehoon 툴바 네비게이션 클릭 메서드\r\n    private fun onClickNavigationIconBackStack() {\r\n        binding.toolBarUserProductInfo.apply {\r\n            setNavigationOnClickListener {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/frume/fragment/user_fragment/product_info/UserProductInfoFragment.kt b/app/src/main/java/com/example/frume/fragment/user_fragment/product_info/UserProductInfoFragment.kt
--- a/app/src/main/java/com/example/frume/fragment/user_fragment/product_info/UserProductInfoFragment.kt	(revision bb4d001bd7c6d0f7ecde2b594d63b98d858396c0)
+++ b/app/src/main/java/com/example/frume/fragment/user_fragment/product_info/UserProductInfoFragment.kt	(date 1737683455559)
@@ -48,7 +48,7 @@
 
     private fun setLayout() {
         val detailList = Storage.detailList
-        binding.viewPagerUserProductInfo.adapter = ProductTabAdapter(this, detailList, args.productDocId!!)
+        binding.viewPagerUserProductInfo.adapter = ProductTabAdapter(this, detailList, args.selectedProductDocId)
         TabLayoutMediator(binding.tabLayoutUserProductInfo, binding.viewPagerUserProductInfo) { tab, pos ->
             tab.text = detailList[pos]
         }.attach()
Index: app/src/main/java/com/example/frume/fragment/user_fragment/category/UserCategoryDetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frume.fragment.user_fragment.category\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.Toast\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.frume.R\r\nimport com.example.frume.databinding.FragmentUserCategoryDetailBinding\r\nimport com.example.frume.databinding.ItemProductBinding\r\nimport com.example.frume.model.ProductModel\r\nimport com.example.frume.service.ProductService\r\nimport com.example.frume.util.ProductInfoType\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.async\r\nimport kotlinx.coroutines.launch\r\nimport kotlin.coroutines.coroutineContext\r\n\r\n\r\nclass UserCategoryDetailFragment : Fragment() {\r\n    private var _binding: FragmentUserCategoryDetailBinding? = null\r\n    private val binding get() = _binding!!\r\n    private val args: UserCategoryDetailFragmentArgs by navArgs()\r\n    private var recyclerViewListByCategory = mutableListOf<ProductModel>()\r\n\r\n    var recyclerViewListByCategoryList = mutableListOf<ProductModel>()\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n\r\n        _binding = DataBindingUtil.inflate(inflater, R.layout.fragment_user_category_detail, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        setLayout()\r\n    }\r\n\r\n    private fun setLayout() {\r\n        // 툴바 설정(상단이름 + 뒤로가기 구현)\r\n        refreshMainRecyclerView()\r\n        settingToolbar()\r\n        /* // RecyclerView 설정\r\n         settingRecyclerView()*/\r\n        onClickToolbar()\r\n        // settingRecyclerView\r\n        settingCategoryRecyclerView()\r\n        // 리사이클러뷰 갱신\r\n        refreshCategoryRecyclerView(args.categoryMethod.str)\r\n        setupSortDropdown()\r\n\r\n    }\r\n\r\n    private fun settingToolbar() {\r\n        // 과일 카테고리 이름을 가져와 툴바 바꾸기\r\n        if (args.categoryMethod.str == \"검색\") {\r\n            binding.toolbarUserCategoryDetail.title = args.searchMethod\r\n        } else {\r\n            binding.toolbarUserCategoryDetail.title = args.categoryMethod.str\r\n        }\r\n    }\r\n\r\n    // sehoon 네비게이션 클릭 메서드\r\n    private fun onClickToolbar() {\r\n        binding.toolbarUserCategoryDetail.setNavigationOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n    }\r\n\r\n\r\n  \r\n    fun settingCategoryRecyclerView() {\r\n        binding.apply {\r\n            recyclerViewUserCategoryDetail.adapter = CategoryRecyclerViewAdapter()\r\n\r\n            // 2열로 구성\r\n            recyclerViewUserCategoryDetail.layoutManager = GridLayoutManager(requireContext(), 2)\r\n        }\r\n    }\r\n\r\n    // 판매량 오름차 정렬\r\n    fun sortBySalesCount() {\r\n        recyclerViewListByCategoryList.sortBy { it.productSalesCount }\r\n\r\n        binding.recyclerViewUserCategoryDetail.adapter?.notifyDataSetChanged()\r\n    }\r\n\r\n    // 판매량 내림차 정렬\r\n    fun sortDescendingBySalesCount() {\r\n        recyclerViewListByCategoryList.sortByDescending { it.productSalesCount }\r\n\r\n        binding.recyclerViewUserCategoryDetail.adapter?.notifyDataSetChanged()\r\n    }\r\n\r\n    // 가격 오름차 정렬\r\n    fun sortByPrice() {\r\n        recyclerViewListByCategoryList.sortBy { it.productPrice }\r\n\r\n        binding.recyclerViewUserCategoryDetail.adapter?.notifyDataSetChanged()\r\n    }\r\n\r\n    // 가격 내림차 정렬\r\n    fun sortDescendingByPrice() {\r\n        recyclerViewListByCategoryList.sortByDescending { it.productPrice }\r\n\r\n        binding.recyclerViewUserCategoryDetail.adapter?.notifyDataSetChanged()\r\n    }\r\n\r\n    // 정렬 드롭다운 메뉴 버튼 리스너\r\n    private fun setupSortDropdown() {\r\n        val autoCompleteTextViewUserCategoryDetailFilterText =\r\n            binding.autoCompleteTextViewUserCategoryDetailSalesCount\r\n        // 드롭다운 데이터 정의\r\n        val filterState = listOf(\"판매량 적은순\", \"판매량 많은순\", \"가격 낮은순\", \"가격 높은순\")\r\n\r\n\r\n        // ArrayAdapter 생성 (autoCompleteOrderStateTextView에 데이터를 연결)\r\n        val adapterSalesCountState = ArrayAdapter(\r\n            requireContext(),\r\n            android.R.layout.simple_dropdown_item_1line,\r\n            filterState\r\n        )\r\n\r\n        // autoCompleteOrderStateTextView에 어댑터 연결\r\n        autoCompleteTextViewUserCategoryDetailFilterText.setAdapter(adapterSalesCountState)\r\n\r\n        // autoCompleteSearchPeriodTextView에 어댑터 연결\r\n\r\n        // autoCompleteOrderStateTextView 항목 선택 이벤트 리스너 설정\r\n        autoCompleteTextViewUserCategoryDetailFilterText.setOnItemClickListener { parent, view, position, id ->\r\n            val selectedProductSalesCountState = parent.getItemAtPosition(position).toString()\r\n            // 선택된 항목 처리\r\n            // 선택된 항목에 따라 메서드를 실행\r\n            when (position) {\r\n                0 -> {\r\n                    // 판매량 적은순 처리\r\n                    sortBySalesCount()\r\n                    Toast.makeText(\r\n                        requireContext(),\r\n                        \"선택된 상태: 판매량 적은순\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n\r\n                1 -> {\r\n                    // 판매량 많은순 처리\r\n                    sortDescendingBySalesCount()\r\n                    Toast.makeText(\r\n                        requireContext(),\r\n                        \"선택된 상태: 판매량 많은순\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n\r\n                2 -> {\r\n                    // 가격 낮은순 처리\r\n                    sortByPrice()\r\n                    Toast.makeText(\r\n                        requireContext(),\r\n                        \"선택된 상태: 가격 낮은순\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n\r\n                3 -> {\r\n                    // 가격 높은순 처리\r\n                    sortDescendingByPrice()\r\n                    Toast.makeText(\r\n                        requireContext(),\r\n                        \"선택된 상태: 가격 높은순\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n\r\n                else -> {\r\n                    Toast.makeText(\r\n                        requireContext(),\r\n                        \"알 수 없는 상태\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 데이터를 가져와 MainRecyclerView를 갱신하는 메서드\r\n    fun refreshCategoryRecyclerView(category: String) {\r\n        // Log.d(\"test100\", \"UserProductShowListFragment : refreshMainRecyclerView\")\r\n\r\n        CoroutineScope(Dispatchers.Main).launch {\r\n            val work1 = async(Dispatchers.IO) {\r\n                //  mutableList<productModel> 가져온다\r\n                ProductService.gettingProductByCategory(category)\r\n            }\r\n            recyclerViewListByCategoryList = work1.await()\r\n\r\n            binding.recyclerViewUserCategoryDetail.adapter?.notifyDataSetChanged()\r\n\r\n            recyclerViewListByCategoryList.forEach {\r\n               // Log.d(\"test100\", \"${it.productName} ${it.productSalesCount}\")\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // CategoryRecyclerView의 어뎁터\r\n    inner class CategoryRecyclerViewAdapter :\r\n        RecyclerView.Adapter<CategoryRecyclerViewAdapter.CategoryViewHolder>() {\r\n        inner class CategoryViewHolder(val itemProductBinding: ItemProductBinding) :\r\n            RecyclerView.ViewHolder(itemProductBinding.root)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CategoryViewHolder {\r\n            val itemProductBinding = DataBindingUtil.inflate<ItemProductBinding>(\r\n                layoutInflater,\r\n                R.layout.item_product,\r\n                parent,\r\n                false\r\n            )\r\n            val categoryViewHolder = CategoryViewHolder(itemProductBinding)\r\n\r\n            itemProductBinding.root.setOnClickListener {\r\n                val action = UserCategoryDetailFragmentDirections.actionUserCategoryDetailToUserProductInfo(recyclerViewListByCategoryList[categoryViewHolder.adapterPosition].productDocId)\r\n                findNavController().navigate(action)\r\n            }\r\n\r\n            return categoryViewHolder\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return recyclerViewListByCategoryList.size\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: CategoryViewHolder, position: Int) {\r\n            holder.itemProductBinding.textViewItemProductTitle.text =\r\n                recyclerViewListByCategoryList[position].productName\r\n            // Log.d(\"test100\", \"recyclerViewListByCategoryList[${position}].productName : ${recyclerViewListByCategoryList[position].productName}\")\r\n            holder.itemProductBinding.textViewItemProductDescription.text =\r\n                recyclerViewListByCategoryList[position].productDescription\r\n        }\r\n    }\r\n\r\n\r\n    // 데이터를 가져와 MainRecyclerView를 갱신하는 메서드\r\n    fun refreshMainRecyclerView(){\r\n        Log.d(\"test100\",\"UserProductShowListFragment : refreshMainRecyclerView\")\r\n\r\n        CoroutineScope(Dispatchers.Main).launch {\r\n            val work1 = async(Dispatchers.IO){\r\n                //  mutableList<productModel> 가져온다\r\n                ProductService.gettingProductByCategory(\"딸기\")\r\n            }\r\n            recyclerViewListByCategory = work1.await()\r\n            settingRecyclerView(recyclerViewListByCategory)\r\n            Log.d(\"test 100\",\"recyclerViewListByCategory : ${recyclerViewListByCategory}\")\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nclass ProductRecyclerViewAdapter(\r\n    private val productList: List<ProductModel>, // 데이터 리스트\r\n    private val onItemClick: (ProductModel) -> Unit // 클릭 리스너\r\n) : RecyclerView.Adapter<ProductRecyclerViewAdapter.ProductViewHolder>() {\r\n\r\n    // ViewHolder 클래스\r\n    inner class ProductViewHolder(val itemProductBinding: ItemProductBinding) :\r\n        RecyclerView.ViewHolder(itemProductBinding.root)\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ProductViewHolder {\r\n        // DataBinding 초기화\r\n        val binding = DataBindingUtil.inflate<ItemProductBinding>(\r\n            LayoutInflater.from(parent.context),\r\n            R.layout.item_product,\r\n            parent,\r\n            false\r\n        )\r\n        val viewHolder = ProductViewHolder(binding)\r\n\r\n        // 클릭 리스너 설정\r\n        binding.root.setOnClickListener {\r\n            val position = viewHolder.adapterPosition\r\n            if (position != RecyclerView.NO_POSITION) {\r\n                onItemClick(productList[position])\r\n            }\r\n        }\r\n\r\n        return viewHolder\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ProductViewHolder, position: Int) {\r\n        val product = productList[position]\r\n        holder.itemProductBinding.apply {\r\n            textViewItemProductTitle.text = product.productName\r\n            textViewItemProductDescription.text = product.productDescription\r\n\r\n            /*imageViewItemProductThumbNail.setImageResource(product.productImgResourceId)*/\r\n\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int = productList.size\r\n}*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/frume/fragment/user_fragment/category/UserCategoryDetailFragment.kt b/app/src/main/java/com/example/frume/fragment/user_fragment/category/UserCategoryDetailFragment.kt
--- a/app/src/main/java/com/example/frume/fragment/user_fragment/category/UserCategoryDetailFragment.kt	(revision bb4d001bd7c6d0f7ecde2b594d63b98d858396c0)
+++ b/app/src/main/java/com/example/frume/fragment/user_fragment/category/UserCategoryDetailFragment.kt	(date 1737683434280)
@@ -18,29 +18,28 @@
 import com.example.frume.databinding.ItemProductBinding
 import com.example.frume.model.ProductModel
 import com.example.frume.service.ProductService
-import com.example.frume.util.ProductInfoType
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.async
 import kotlinx.coroutines.launch
-import kotlin.coroutines.coroutineContext
 
 
 class UserCategoryDetailFragment : Fragment() {
     private var _binding: FragmentUserCategoryDetailBinding? = null
     private val binding get() = _binding!!
     private val args: UserCategoryDetailFragmentArgs by navArgs()
-    private var recyclerViewListByCategory = mutableListOf<ProductModel>()
-
     var recyclerViewListByCategoryList = mutableListOf<ProductModel>()
 
-
     override fun onCreateView(
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View {
-
-        _binding = DataBindingUtil.inflate(inflater, R.layout.fragment_user_category_detail, container, false)
+        _binding = DataBindingUtil.inflate(
+            inflater,
+            R.layout.fragment_user_category_detail,
+            container,
+            false
+        )
         return binding.root
     }
 
@@ -57,7 +56,6 @@
 
     private fun setLayout() {
         // 툴바 설정(상단이름 + 뒤로가기 구현)
-        refreshMainRecyclerView()
         settingToolbar()
         /* // RecyclerView 설정
          settingRecyclerView()*/
@@ -67,7 +65,6 @@
         // 리사이클러뷰 갱신
         refreshCategoryRecyclerView(args.categoryMethod.str)
         setupSortDropdown()
-
     }
 
     private fun settingToolbar() {
@@ -86,8 +83,16 @@
         }
     }
 
+    /*   private fun settingRecyclerView() {
+           binding.apply {
+               recyclerViewUserCategoryDetail.adapter = ProductRecyclerViewAdapter(recyclerViewListByCategoryL) { product ->
+                   val action = UserCategoryDetailFragmentDirections.actionUserCategoryDetailToUserProductInfo(product.productDocId)
+                   findNavController().navigate(action)
+               }
+           }
+       }*/
 
-  
+    // 메인 RecyclerView 구성 메서드
     fun settingCategoryRecyclerView() {
         binding.apply {
             recyclerViewUserCategoryDetail.adapter = CategoryRecyclerViewAdapter()
@@ -218,7 +223,7 @@
             binding.recyclerViewUserCategoryDetail.adapter?.notifyDataSetChanged()
 
             recyclerViewListByCategoryList.forEach {
-               // Log.d("test100", "${it.productName} ${it.productSalesCount}")
+                // Log.d("test100", "${it.productName} ${it.productSalesCount}")
             }
         }
     }
@@ -261,21 +266,23 @@
     }
 
 
-    // 데이터를 가져와 MainRecyclerView를 갱신하는 메서드
-    fun refreshMainRecyclerView(){
-        Log.d("test100","UserProductShowListFragment : refreshMainRecyclerView")
+    /* // 데이터를 가져와 MainRecyclerView를 갱신하는 메서드
+     fun refreshMainRecyclerView(){
+         Log.d("test100","UserProductShowListFragment : refreshMainRecyclerView")
 
-        CoroutineScope(Dispatchers.Main).launch {
-            val work1 = async(Dispatchers.IO){
-                //  mutableList<productModel> 가져온다
-                ProductService.gettingProductByCategory("딸기")
-            }
-            recyclerViewListByCategory = work1.await()
-            settingRecyclerView(recyclerViewListByCategory)
-            Log.d("test 100","recyclerViewListByCategory : ${recyclerViewListByCategory}")
-        }
-    }
+         CoroutineScope(Dispatchers.Main).launch {
+             val work1 = async(Dispatchers.IO){
+                 //  mutableList<productModel> 가져온다
+                 ProductService.gettingProductByCategory("딸기")
+             }
+             recyclerViewListByCategory = work1.await()
+            // settingRecyclerView(recyclerViewListByCategory)
+             Log.d("test 100","recyclerViewListByCategory : ${recyclerViewListByCategory}")
+         }
+     }*/
+
 }
+
 
 /*
 class ProductRecyclerViewAdapter(
@@ -313,11 +320,11 @@
         holder.itemProductBinding.apply {
             textViewItemProductTitle.text = product.productName
             textViewItemProductDescription.text = product.productDescription
-
-            /*imageViewItemProductThumbNail.setImageResource(product.productImgResourceId)*/
+            */
+/*imageViewItemProductThumbNail.setImageResource(product.productImgResourceId)*//*
 
         }
     }
 
     override fun getItemCount(): Int = productList.size
-}*/
+}*/
\ No newline at end of file
Index: app/src/main/java/com/example/frume/login/UserLoginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frume.login\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.example.frume.R\r\nimport com.example.frume.databinding.FragmentUserLoginBinding\r\nimport com.example.frume.home.HomeActivity\r\nimport com.example.frume.service.UserService\r\nimport com.example.frume.util.LoginResult\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.async\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\nclass UserLoginFragment : Fragment() {\r\n    private var _binding: FragmentUserLoginBinding? = null\r\n    private val binding get() = _binding!!\r\n    lateinit var loginActivity: LoginActivity\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = DataBindingUtil.inflate(inflater, R.layout.fragment_user_login, container, false)\r\n        loginActivity = activity as LoginActivity\r\n        return binding.root\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setLayout()\r\n    }\r\n\r\n    private fun setLayout() {\r\n        onClickLoginBtn()\r\n        onClickSignUpBtn()\r\n        onClickNonMemberLoginBtn()\r\n    }\r\n\r\n    // sehoon 홈 화면 이동 메서드\r\n    private fun moveToHomeScreen() {\r\n        val intent = Intent(requireContext(), HomeActivity::class.java)\r\n        intent.putExtra(\"user_document_id\", \"noUser\")\r\n        startActivity(intent)\r\n        loginActivity.finish()\r\n    }\r\n\r\n    // sehoon 로그인 버튼 클릭 메서드\r\n    private fun onClickLoginBtn() {\r\n        binding.buttonUserSignUp.setOnClickListener {\r\n            proLogin()\r\n        }\r\n    }\r\n\r\n    // sehoon 비회원 접속 버튼 클릭 메서드\r\n    private fun onClickNonMemberLoginBtn() {\r\n        binding.buttonUserLoginNonMember.setOnClickListener {\r\n            moveToHomeScreen()\r\n        }\r\n    }\r\n\r\n    // sehoon 회원가입 버튼 클릭 메서드\r\n    private fun onClickSignUpBtn() {\r\n        binding.textViewUserLoginSignUpButton.setOnClickListener {\r\n            val action = UserLoginFragmentDirections.actionUserLoginToUserSignup()\r\n            findNavController().navigate(action)\r\n        }\r\n    }\r\n    // 로그인 처리 메서드\r\n    fun proLogin() {\r\n        binding.apply {\r\n            // 입력 요소 검사\r\n            if (binding.textFieldUserLoginId.editText?.text?.toString()?.isEmpty()!!) {\r\n                /*  userActivity.showMessageDialog(\"아이디 입력\", \"아이디를 입력해주세요\", \"확인\") {\r\n                      userActivity.showSoftInput(textFieldUserLoginId.editText!!)\r\n                  }\r\n                  return*/\r\n            }\r\n            if (binding.textFieldUserLoginPw.editText?.text?.toString()?.isEmpty()!!) {\r\n                /*    userActivity.showMessageDialog(\"비밀번호 입력\", \"비밀번호를 입력해주세요\", \"확인\") {\r\n                        userActivity.showSoftInput(textFieldUserLoginPw.editText!!)\r\n                    }\r\n                    return*/\r\n\r\n              /*  userActivity.showMessageDialog(\"아이디 입력\", \"아이디를 입력해주세요\", \"확인\") {\r\n                    userActivity.showSoftInput(textFieldUserLoginId.editText!!)\r\n                }\r\n                return*/\r\n\r\n            }\r\n\r\n            // 사용자가 입력한 아이디와 비밀번호\r\n            val loginUserId = binding.textFieldUserLoginId.editText?.text.toString()\r\n            val loginUserPw = binding.textFieldUserLoginPw.editText?.text.toString()\r\n\r\n            CoroutineScope(Dispatchers.Main).launch {\r\n                val work1 = async(Dispatchers.IO) {\r\n                    UserService.checkLogin(loginUserId, loginUserPw)\r\n                }\r\n                // 로그인 결과를 가져온다.\r\n                val loginResult = work1.await()\r\n                // Log.d(\"test100\", loginResult.str)\r\n                // 로그인 결과로 분기한다.\r\n                when (loginResult) {\r\n                    LoginResult.LOGIN_RESULT_ID_NOT_EXIST -> {\r\n\r\n                        /*     userActivity.showMessageDialog(\"로그인 실패\", \"존재하지 않는 아이디 입니다\", \"확인\") {\r\n                                 loginViewModel?.textFieldUserLoginIdEditTextText?.value = \"\"\r\n                                 loginViewModel?.textFieldUserLoginPwEditTextText?.value = \"\"\r\n                                 userActivity.showSoftInput(textFieldUserLoginId.editText!!)\r\n                             }*/\r\n                    }\r\n\r\n                    LoginResult.LOGIN_RESULT_PASSWORD_INCORRECT -> {\r\n                        /* userActivity.showMessageDialog(\"로그인 실패\", \"잘못된 비밀번호 입니다\", \"확인\") {\r\n                             loginViewModel?.textFieldUserLoginPwEditTextText?.value = \"\"\r\n                             userActivity.showSoftInput(textFieldUserLoginPw.editText!!)\r\n                         }*/\r\n                    }\r\n\r\n                    LoginResult.LOGIN_RESULT_SIGNOUT_MEMBER -> {\r\n                        /*userActivity.showMessageDialog(\"로그인 실패\", \"탈퇴한 회원입니다\", \"확인\") {\r\n\r\n                   /*     userActivity.showMessageDialog(\"로그인 실패\", \"존재하지 않는 아이디 입니다\", \"확인\") {\r\n\r\n                            loginViewModel?.textFieldUserLoginIdEditTextText?.value = \"\"\r\n                            loginViewModel?.textFieldUserLoginPwEditTextText?.value = \"\"\r\n                            userActivity.showSoftInput(textFieldUserLoginId.editText!!)\r\n                        }*/\r\n                    }\r\n\r\n\r\n\r\n                    // hyeonseo 0123\r\n                   LoginResult.LOGIN_RESULT_SUCCESS -> {\r\n//                        // 로그인한 사용자 정보를 가져온다.\r\n//                        val work2 = async(Dispatchers.IO) {\r\n//                            UserService.selectUserDataByUserIdOne(loginUserId)\r\n//                        }\r\n//                        val loginUserModel = work2.await()\r\n//\r\n//                        // 만약 자동로그인이 체크되어 있다면\r\n//                        if (binding.checkBoxUserLoginAuto) {\r\n//                            CoroutineScope(Dispatchers.Main).launch {\r\n//                                val work1 = async(Dispatchers.IO) {\r\n//                                    UserService.updateUserAutoLoginToken(\r\n//                                        userActivity,\r\n//                                        loginUserModel.userDocumentId\r\n//                                    )\r\n//                                }\r\n//                                work1.join()\r\n//                            }\r\n//                        }\r\n//\r\n//\r\n//                        val intent = Intent(requireContext(), HomeActivity::class.java)\r\n//                        intent.putExtra(\"user_document_id\", loginUserModel.customerUserDocId)\r\n//                        startActivity(intent)\r\n//                        loginActivity.finish()\r\n                  }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n                    LoginResult.LOGIN_RESULT_PASSWORD_INCORRECT -> {\r\n                       /* userActivity.showMessageDialog(\"로그인 실패\", \"잘못된 비밀번호 입니다\", \"확인\") {\r\n                            loginViewModel?.textFieldUserLoginPwEditTextText?.value = \"\"\r\n                            userActivity.showSoftInput(textFieldUserLoginPw.editText!!)\r\n                        }*/\r\n                    }\r\n\r\n                    LoginResult.LOGIN_RESULT_SIGN_OUT_MEMBER -> {\r\n                        /*userActivity.showMessageDialog(\"로그인 실패\", \"탈퇴한 회원입니다\", \"확인\") {\r\n                            loginViewModel?.textFieldUserLoginIdEditTextText?.value = \"\"\r\n                            loginViewModel?.textFieldUserLoginPwEditTextText?.value = \"\"\r\n                            userActivity.showSoftInput(textFieldUserLoginId.editText!!)\r\n                        }*/\r\n                    }\r\n\r\n}\r\n\r\n                    LoginResult.LOGIN_RESULT_SUCCESS -> {\r\n                        // 로그인한 사용자 정보를 가져온다.\r\n                        val work2 = async(Dispatchers.IO) {\r\n                            UserService.selectUserDataByUserIdOne(loginUserId)\r\n                        }\r\n                        val loginUserModel = work2.await()\r\n/*\r\n                        // 만약 자동로그인이 체크되어 있다면\r\n                        if (loginViewModel?.checkBoxUserLoginAutoChecked?.value!!) {\r\n                            CoroutineScope(Dispatchers.Main).launch {\r\n                                val work1 = async(Dispatchers.IO) {\r\n                                    UserService.updateUserAutoLoginToken(\r\n                                        userActivity,\r\n                                        loginUserModel.userDocumentId\r\n                                    )\r\n                                }\r\n                                work1.join()\r\n                            }\r\n                        }*/\r\n\r\n                        val intent = Intent(requireContext(), HomeActivity::class.java)\r\n                        intent.putExtra(\"user_document_id\", loginUserModel.customerUserDocId)\r\n                        startActivity(intent)\r\n                        loginActivity.finish()\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/frume/login/UserLoginFragment.kt b/app/src/main/java/com/example/frume/login/UserLoginFragment.kt
--- a/app/src/main/java/com/example/frume/login/UserLoginFragment.kt	(revision bb4d001bd7c6d0f7ecde2b594d63b98d858396c0)
+++ b/app/src/main/java/com/example/frume/login/UserLoginFragment.kt	(date 1737683277183)
@@ -1,7 +1,10 @@
 package com.example.frume.login
 
+
 import android.content.Intent
 import android.os.Bundle
+import android.text.Editable
+import android.text.TextWatcher
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
@@ -17,6 +20,8 @@
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.async
 import kotlinx.coroutines.launch
+import com.example.frume.model.UserModel
+
 
 
 class UserLoginFragment : Fragment() {
@@ -44,9 +49,12 @@
     }
 
     private fun setLayout() {
+
         onClickLoginBtn()
         onClickSignUpBtn()
         onClickNonMemberLoginBtn()
+        setupErrorResetListeners()
+
     }
 
     // sehoon 홈 화면 이동 메서드
@@ -78,27 +86,45 @@
             findNavController().navigate(action)
         }
     }
+
+    // 에러 리셋 리스너 설정
+    private fun setupErrorResetListeners() {
+        binding.apply {
+            // ID 입력 필드의 에러 리셋
+            textFieldUserLoginId.editText?.let { editText ->
+                editText.addTextChangedListener(object : TextWatcher {
+                    override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
+                    override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
+                        textFieldUserLoginId.error = null // 에러 초기화
+                    }
+                    override fun afterTextChanged(s: Editable?) {}
+                })
+            }
+
+            // 비밀번호 입력 필드의 에러 리셋
+            textFieldUserLoginPw.editText?.let { editText ->
+                editText.addTextChangedListener(object : TextWatcher {
+                    override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
+                    override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
+                        textFieldUserLoginPw.error = null // 에러 초기화
+                    }
+                    override fun afterTextChanged(s: Editable?) {}
+                })
+            }
+        }
+    }
+
     // 로그인 처리 메서드
     fun proLogin() {
         binding.apply {
             // 입력 요소 검사
             if (binding.textFieldUserLoginId.editText?.text?.toString()?.isEmpty()!!) {
-                /*  userActivity.showMessageDialog("아이디 입력", "아이디를 입력해주세요", "확인") {
-                      userActivity.showSoftInput(textFieldUserLoginId.editText!!)
-                  }
-                  return*/
+                binding.textFieldUserLoginId.error = "아이디를 입력해주세요"
+                return
             }
             if (binding.textFieldUserLoginPw.editText?.text?.toString()?.isEmpty()!!) {
-                /*    userActivity.showMessageDialog("비밀번호 입력", "비밀번호를 입력해주세요", "확인") {
-                        userActivity.showSoftInput(textFieldUserLoginPw.editText!!)
-                    }
-                    return*/
-
-              /*  userActivity.showMessageDialog("아이디 입력", "아이디를 입력해주세요", "확인") {
-                    userActivity.showSoftInput(textFieldUserLoginId.editText!!)
-                }
-                return*/
-
+                binding.textFieldUserLoginPw.error = "비밀번호를 입력해주세요"
+                return
             }
 
             // 사용자가 입력한 아이디와 비밀번호
@@ -111,117 +137,51 @@
                 }
                 // 로그인 결과를 가져온다.
                 val loginResult = work1.await()
-                // Log.d("test100", loginResult.str)
+
                 // 로그인 결과로 분기한다.
                 when (loginResult) {
                     LoginResult.LOGIN_RESULT_ID_NOT_EXIST -> {
-
-                        /*     userActivity.showMessageDialog("로그인 실패", "존재하지 않는 아이디 입니다", "확인") {
-                                 loginViewModel?.textFieldUserLoginIdEditTextText?.value = ""
-                                 loginViewModel?.textFieldUserLoginPwEditTextText?.value = ""
-                                 userActivity.showSoftInput(textFieldUserLoginId.editText!!)
-                             }*/
+                        binding.textFieldUserLoginId.error = "존재하지 않는 아이디 입니다"
                     }
-
-                    LoginResult.LOGIN_RESULT_PASSWORD_INCORRECT -> {
-                        /* userActivity.showMessageDialog("로그인 실패", "잘못된 비밀번호 입니다", "확인") {
-                             loginViewModel?.textFieldUserLoginPwEditTextText?.value = ""
-                             userActivity.showSoftInput(textFieldUserLoginPw.editText!!)
-                         }*/
-                    }
-
-                    LoginResult.LOGIN_RESULT_SIGNOUT_MEMBER -> {
-                        /*userActivity.showMessageDialog("로그인 실패", "탈퇴한 회원입니다", "확인") {
-
-                   /*     userActivity.showMessageDialog("로그인 실패", "존재하지 않는 아이디 입니다", "확인") {
-
-                            loginViewModel?.textFieldUserLoginIdEditTextText?.value = ""
-                            loginViewModel?.textFieldUserLoginPwEditTextText?.value = ""
-                            userActivity.showSoftInput(textFieldUserLoginId.editText!!)
-                        }*/
-                    }
-
-
-
-                    // hyeonseo 0123
-                   LoginResult.LOGIN_RESULT_SUCCESS -> {
-//                        // 로그인한 사용자 정보를 가져온다.
-//                        val work2 = async(Dispatchers.IO) {
-//                            UserService.selectUserDataByUserIdOne(loginUserId)
-//                        }
-//                        val loginUserModel = work2.await()
-//
-//                        // 만약 자동로그인이 체크되어 있다면
-//                        if (binding.checkBoxUserLoginAuto) {
-//                            CoroutineScope(Dispatchers.Main).launch {
-//                                val work1 = async(Dispatchers.IO) {
-//                                    UserService.updateUserAutoLoginToken(
-//                                        userActivity,
-//                                        loginUserModel.userDocumentId
-//                                    )
-//                                }
-//                                work1.join()
-//                            }
-//                        }
-//
-//
-//                        val intent = Intent(requireContext(), HomeActivity::class.java)
-//                        intent.putExtra("user_document_id", loginUserModel.customerUserDocId)
-//                        startActivity(intent)
-//                        loginActivity.finish()
-                  }
-
-                }
-            }
-        }
-    }
 
                     LoginResult.LOGIN_RESULT_PASSWORD_INCORRECT -> {
-                       /* userActivity.showMessageDialog("로그인 실패", "잘못된 비밀번호 입니다", "확인") {
-                            loginViewModel?.textFieldUserLoginPwEditTextText?.value = ""
-                            userActivity.showSoftInput(textFieldUserLoginPw.editText!!)
-                        }*/
+                        binding.textFieldUserLoginPw.error = "잘못된 비밀번호입니다"
                     }
 
                     LoginResult.LOGIN_RESULT_SIGN_OUT_MEMBER -> {
-                        /*userActivity.showMessageDialog("로그인 실패", "탈퇴한 회원입니다", "확인") {
-                            loginViewModel?.textFieldUserLoginIdEditTextText?.value = ""
-                            loginViewModel?.textFieldUserLoginPwEditTextText?.value = ""
-                            userActivity.showSoftInput(textFieldUserLoginId.editText!!)
-                        }*/
+                        binding.textFieldUserLoginId.error = "탈퇴한 회원입니다"
+                        binding.textFieldUserLoginPw.error = "탈퇴한 회원입니다"
                     }
-
-}
 
                     LoginResult.LOGIN_RESULT_SUCCESS -> {
+
                         // 로그인한 사용자 정보를 가져온다.
                         val work2 = async(Dispatchers.IO) {
                             UserService.selectUserDataByUserIdOne(loginUserId)
                         }
                         val loginUserModel = work2.await()
-/*
+
                         // 만약 자동로그인이 체크되어 있다면
-                        if (loginViewModel?.checkBoxUserLoginAutoChecked?.value!!) {
+                        if (binding.checkBoxUserLoginAuto.isChecked) {
                             CoroutineScope(Dispatchers.Main).launch {
+
                                 val work1 = async(Dispatchers.IO) {
                                     UserService.updateUserAutoLoginToken(
-                                        userActivity,
-                                        loginUserModel.userDocumentId
+                                        loginActivity,
+                                        loginUserModel.customerUserDocId
                                     )
                                 }
                                 work1.join()
                             }
-                        }*/
-
+                        }
+                        // HomeActivity를 실행하고 현재 Activity를 종료한다.
                         val intent = Intent(requireContext(), HomeActivity::class.java)
                         intent.putExtra("user_document_id", loginUserModel.customerUserDocId)
                         startActivity(intent)
-                        loginActivity.finish()
+                        requireActivity().finish()
                     }
-
                 }
             }
         }
     }
 }
-
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n  <component name=\"VisualizationToolProject\">\r\n    <option name=\"state\">\r\n      <ProjectState>\r\n        <option name=\"scale\" value=\"0.1067463706233988\" />\r\n      </ProjectState>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision bb4d001bd7c6d0f7ecde2b594d63b98d858396c0)
+++ b/.idea/misc.xml	(date 1737683032378)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
